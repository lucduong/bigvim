" ----------------------------------------------------------------------------
" Vim-Plug:Plgin management and setting
" ----------------------------------------------------------------------------
call plug#begin('~/.vim/bundle')

let mapleader = ','
let g:mapleader = ','
let s:vim8 = has('patch-8.0.0039') && exists('*job_start')

if !exists('g:bigvim_minor_plugins')
    let g:bigvim_minor_plugins=['css',]
endif

" ----------------------------------------------------------------------------
" vim plugin bundle control, command model
" :PlugInstall     install
" :PlugInstall!    update
" :PlugClean       remove plugin not in list
" ----------------------------------------------------------------------------

" display
Plug 'Valloric/MatchTagAlways'
Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'
let g:lightline#bufferline#show_number = 1
let g:lightline#bufferline#unnamed = '[No Name]'
let g:lightline = {
  \ 'colorscheme': 'solarized',
  \ 'active': {
  \   'left': [
  \     [ 'mode', 'paste' ],
  \     [ 'readonly', 'filename' ],
  \     [ 'gitbranch', 'gitstatus' ]
  \   ],
  \   'right':[
  \     [ 'filetype', 'lineinfo', 'percent', 'cocstatus' ],
  \     [ 'diagnostic' ],
  \     [ 'blame' ]
  \   ],
  \ },
  \ 'tabline': {
  \   'left': [ ['buffers'] ],
  \   'right': [ [] ]
  \ },
  \ 'component_expand': {
  \   'buffers': 'lightline#bufferline#buffers'
  \ },
  \ 'component_type': {
  \   'buffers': 'tabsel'
  \ },
  \ 'component_function': {
  \   'blame': 'LightlineGitBlame',
  \   'diagnostic': 'LightlineDiagnostic',
  \   'cocstatus': 'LightlineCocStatus',
  \   'gitbranch': 'LightlineGitBranch',
  \   'gitstatus': 'LightlineGitStatus',
  \   'filename': 'LightlineFilename'
  \ }
\ }
nmap gc <Plug>(coc-git-commit)
nmap gs <Plug>(coc-git-chunkinfo)
autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()

function! LightlineGitBlame() abort
  let blame = get(b:, 'coc_git_blame', '')
  " return blame
  return winwidth(0) > 120 ? blame : ''
endfunction

function! LightlineDiagnostic() abort
  let info = get(b:, 'coc_diagnostic_info', {})
  if empty(info) | return '' | endif
  let msgs = []
  if get(info, 'error', 0)
    call add(msgs, '✘' . info['error'])
  endif
  if get(info, 'warning', 0)
    call add(msgs, '❕' . info['warning'])
  endif
  return join(msgs, ' ')
endfunction

function! LightlineCocStatus() abort
  let status = get(g:, 'coc_status', '')
  return status
endfunction

function! LightlineGitBranch() abort
  let status = get(g:, 'coc_git_status', '')
  return status
endfunction

function! LightlineGitStatus() abort
  let status = get(b:, 'coc_git_status', '')
  return status
endfunction

function! LightlineFilename()
  let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfunction

" fast move
Plug 'vim-scripts/matchit.zip'
Plug 'easymotion/vim-easymotion'
Plug 'unblevable/quick-scope'
let g:qs_lazy_highlight = 1

Plug 'ruanyl/vim-gh-line'
"Plug 'yuttie/comfortable-motion.vim'

" fast edit
Plug 'github/copilot.vim', {'branch': 'release'}
Plug 'honza/vim-snippets'
Plug 'ruanyl/vim-es2015-snippets'
Plug 'tpope/vim-repeat'
Plug 'gcmt/wildfire.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'alvan/vim-closetag'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-surround'
Plug 'bronson/vim-trailing-whitespace'
Plug 'scrooloose/nerdcommenter'
Plug 'editorconfig/editorconfig-vim'

Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install'}

let g:coc_global_extensions = [
    \'coc-yank',
    \'coc-word',
    \'coc-snippets',
    \'coc-prettier',
    \'coc-lists',
    \'coc-jest',
    \'coc-highlight',
    \'coc-tsserver',
    \'coc-json',
    \'coc-eslint',
    \'coc-html',
    \'coc-css',
    \'coc-git',
    \'coc-explorer',
    \'@yaegassy/coc-volar',
    \]

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

inoremap <silent><expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
inoremap <silent><expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"
nmap <silent> <C-]> <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)
nnoremap <silent> K :call <SID>show_documentation()<CR>
imap <C-l> <Plug>(coc-snippets-expand)

" scroll float window
nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

vmap <leader>a  <Plug>(coc-codeaction-selected)<CR>
nmap <leader>a  <Plug>(coc-codeaction-selected)<CR>
nmap <Leader>bj <Plug>(coc-bookmark-next)
nmap <Leader>bk <Plug>(coc-bookmark-prev)

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)
nmap <Leader>rf <Plug>(coc-refactor)
nmap <Leader>ff <Plug>(coc-format)
vmap <Leader>ff <Plug>(coc-format-selected)

let g:coc_snippet_next = '<c-j>'
let g:coc_snippet_prev = '<c-k>'

nmap <silent> <leader>j <Plug>(coc-diagnostic-next)
nmap <silent> <leader>k <Plug>(coc-diagnostic-prev)

autocmd CursorHold * silent call CocActionAsync('highlight')
command! -nargs=0 Prettier :CocCommand prettier.formatFile

" CocList for mru, buffers and files
nnoremap <leader>m :CocList mru<CR>
nnoremap <leader>b :CocList buffers<CR>
nnoremap <c-p> :CocList files<CR>

" coc-explorer
nnoremap <leader>e :CocCommand explorer<CR>
nnoremap <c-o> :call FocusInExplorer()<CR>

function! FocusInExplorer()
  let l:a = 0
  for window in getwininfo()
    if getbufvar(window.bufnr, '&ft') == 'coc-explorer'
      let l:a = 1
      break
    endif
  endfor
  if l:a == 1
    call CocAction('runCommand', 'explorer.doAction', 'closest', ['reveal:0'], [['relative', 0, 'file']])
  else
    execute 'CocCommand explorer --reveal '.expand('%:p')
  endif
endfunction

Plug 'plasticboy/vim-markdown'
Plug 'tpope/vim-obsession' | Plug 'dhruvasagar/vim-prosession'
Plug 'szw/vim-maximizer'
Plug 'mbbill/undotree'
nnoremap <leader>h :UndotreeToggle<CR>

Plug 'ruanyl/vim-sort-imports', {'for': ['javascript', 'typescript', 'typescript.tsx']}
let g:import_sort_auto = 1

Plug 'moll/vim-bbye'
Plug 'tpope/vim-fugitive'
Plug 'vim-scripts/BufOnly.vim'

" theme
Plug 'lifepillar/vim-solarized8'
Plug 'altercation/vim-colors-solarized'
Plug 'tomasr/molokai'
Plug 'morhetz/gruvbox'
Plug 'haishanh/night-owl.vim'

" search
Plug 'rking/ag.vim'

" javascript
Plug 'neoclide/vim-jsx-improve'
Plug 'yaegassy/coc-jsdoc', {'do': 'yarn install --frozen-lockfile'}

" typescript
Plug 'HerringtonDarkholme/yats.vim'
" CSS
if count(g:bigvim_minor_plugins, 'css')
    "Plug 'ruanyl/vim-caniuse', {'on': 'Caniuse', 'for': ['css', 'html']}
    "Plug 'hail2u/vim-css3-syntax'
    Plug 'cakebaker/scss-syntax.vim'
    Plug 'JulesWang/css.vim'
    au BufRead,BufNewFile *.css set filetype=scss
endif

"Load local plugins
if filereadable(expand("~/.vim/vimrc.bundles.local"))
  source ~/.vim/vimrc.bundles.local
endif
call plug#end()

" ----------------------------------------------------------------------------
" ag.vim
" ----------------------------------------------------------------------------
nnoremap <Leader><Leader>a :Ag!<space>
let g:ag_working_path_mode='r'

" ----------------------------------------------------------------------------
" vim-trailing-whitespace
" Mapping: <leader><space>
" ----------------------------------------------------------------------------
map <leader><space> :FixWhitespace<cr>

" ----------------------------------------------------------------------------
" vim-maximizer
" ----------------------------------------------------------------------------
let g:maximizer_set_default_mapping = 0
nnoremap <tab> :MaximizerToggle<CR>

" ----------------------------------------------------------------------------
" vim-colors-solarized
" ----------------------------------------------------------------------------
let g:solarized_statusline='flat'

" ----------------------------------------------------------------------------
" vim-easymotion
" ----------------------------------------------------------------------------
map <space> <Plug>(easymotion-s2)
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
let g:EasyMotion_smartcase = 1

" ----------------------------------------------------------------------------
" wildfire.vim
" Mapping: <Enter>
" ----------------------------------------------------------------------------
let g:wildfire_objects = {
    \ "*" : ["i'", 'i"', "i)", "i]", "i}", "ip"],
    \ "html,xml" : ["at"],
\ }
let g:wildfire_fuel_map = "<ENTER>"
let g:wildfire_water_map = "<BS>"

" ----------------------------------------------------------------------------
" vim-closetag
" ----------------------------------------------------------------------------
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.xml,*.js,*.tsx"

" ----------------------------------------------------------------------------
" vim-markdown
" ----------------------------------------------------------------------------
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_no_default_key_mappings=1
let g:vim_markdown_frontmatter=1

" ----------------------------------------------------------------------------
" vim-bbye
" ----------------------------------------------------------------------------
nnoremap qq :Bdelete<cr>

" ----------------------------------------------------------------------------
" BufOnly.vim
" ----------------------------------------------------------------------------
nnoremap <silent> qo :BufOnly<CR>
